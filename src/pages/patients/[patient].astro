---
import Layout from "../../layouts/Layout.astro";
import { fetchPatients } from "../../utils/fetchPatients";
import type { Patient, RichTextChild } from "../../types/Patient";

// Define getStaticPaths to generate paths for each patient
export async function getStaticPaths() {
  // Helper function to create slugs from names within the scope of getStaticPaths
  function createSlug(name: string): string {
    return name.toLowerCase().replace(/\s+/g, '-');
  }

  const patients: Patient[] = await fetchPatients();  

  // Use createSlug within getStaticPaths
  return patients.map((patient) => ({
    params: { patient: createSlug(patient.name) },
  }));
}

// Get the patient's slug from the URL parameters
const { patient } = Astro.params;

// Define createSlug again in the main scope
function createSlug(name: string): string {
  return name.toLowerCase().replace(/\s+/g, '-');
}

// Fetch all patients and find the matching one based on the slug
let selectedPatient: Patient | null = null;
try {
  const patients: Patient[] = await fetchPatients();
  selectedPatient = patients.find(p => createSlug(p.name) === patient) || null;
} catch (error) {
  console.error("Error fetching patient data:", error);
}

if (!selectedPatient) {
  throw new Error(`Patient "${patient}" not found.`);
}


const normalizedRisk = selectedPatient.risk ? selectedPatient.risk.toLowerCase().trim() : '';

// Determine the risk color class
const riskClass =
  normalizedRisk.includes('low') ? 'bg-green-200' :
  normalizedRisk.includes('moderate') ? 'bg-yellow-200' :
  normalizedRisk.includes('high') ? 'bg-red-200' :
  'bg-gray-200'; 

---

<Layout title={`${selectedPatient.name || 'N/A'} Overview`}>
  <div class="container mx-auto px-4 py-8 bg-[#FDF9F4] shadow-lg rounded-lg mt-5">
    <!-- Profile Header -->
    <div class={`flex flex-col lg:flex-row items-center gap-6 p-6 rounded-lg shadow-md ${riskClass}`}>
      <img src={selectedPatient.profileImage || '/default-profile.png'} alt={`${selectedPatient.name}'s Profile`} class="w-32 h-32 rounded-full shadow-md" />
      <div class="text-center lg:text-left">
        <h2 class="text-3xl font-bold">{selectedPatient.name || 'N/A'}</h2>
        <p class="text-gray-700 mt-2"><strong>Age:</strong> {selectedPatient.age || 'N/A'}</p>
        <p class="text-gray-700"><strong>Gender:</strong> {selectedPatient.gender || 'N/A'}</p>
        <p class="mt-4 inline-block px-4 py-2 rounded-full font-medium">{selectedPatient.risk || 'N/A'}</p>
      </div>
    </div>

    <!-- Detailed Information -->
    <div class="mt-6 grid gap-6 lg:grid-cols-2">
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-xl font-semibold text-gray-800 mb-4">General Information</h3>
        <p><strong>Occupation:</strong> {selectedPatient.occupation || 'N/A'}</p>
        <p><strong>Diagnosis:</strong> {selectedPatient.diagnosis || 'N/A'}</p>
        <p><strong>Birthday:</strong> {selectedPatient.birthday || 'N/A'}</p>
        <p><strong>Visits:</strong> {selectedPatient.visits || 'N/A'}</p>
        <p><strong>New Patient:</strong> {selectedPatient.isNew ? 'Yes' : 'No' }</p>
      </div>

      <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-xl font-semibold text-gray-800 mb-4">Physical Metrics</h3>
        <p><strong>Weight:</strong> {selectedPatient.weight || 'N/A'} kg</p>
        <p><strong>Height:</strong> {selectedPatient.height || 'N/A'} cm</p>
        <p><strong>BMI:</strong> {selectedPatient.bmi || 'N/A'}</p>
        <p><strong>Estimated Energy Intake:</strong> {selectedPatient.estimated_energy_intake || 'N/A'} kcal</p>
      </div>
    </div>

    <!-- Additional Information -->
    <div class="mt-6 bg-white p-6 rounded-lg shadow-md">
      <h3 class="text-xl font-semibold text-gray-800 mb-4">Additional Information</h3>
      <p><strong>Physical Activity:</strong> {selectedPatient.physical_activity || 'N/A'}</p>
      <p><strong>Meals:</strong> {selectedPatient.meals || 'N/A'}</p>
      <p>
        <strong>Biochemical data:</strong>
        {selectedPatient.biochemical?.map((item: RichTextChild) => (
          item?.children?.map((child: RichTextChild) => (
            <p>{child?.text}</p>
          ))
        )) || <p>No biochemical data available.</p>}
      <div class="mt-4">
        <h4 class="text-lg font-medium">Motivation Scores</h4>
        <p><strong>Importance:</strong> {selectedPatient.motivation_importance || 'N/A'}</p>
        <p><strong>Confidence:</strong> {selectedPatient.motivation_confidence || 'N/A'}</p>
        <p><strong>Readiness:</strong> {selectedPatient.motivation_readiness || 'N/A'}</p>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="mt-6 flex justify-between">
      <button onclick="history.back()" class="bg-gray-200 text-gray-700 px-4 py-2 rounded hover:bg-gray-300">
        Back
      </button>
      <button class="bg-gray-200 text-gray-700 px-4 py-2 rounded hover:bg-gray-300"><a href="/Nutritionist">Refer</a></button>
    </div>
  </div>
</Layout>
