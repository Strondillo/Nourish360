---
// components/AssessmentForm.astro
const { formData } = Astro.props;
---
<div class="space-y-6 bg-white rounded-lg shadow p-6">
  <!-- Dynamically render each category -->
  {Object.keys(formData).map((key) => {
    const value = formData[key];
    const displayValue = typeof value === "string" ? value : JSON.stringify(value, null, 2);
  
    return (
      <div class="relative p-4">
        <h3 class="font-bold text-lg mb-3">{key}</h3>
        <p>{displayValue}</p>
        <button
          type="button"
          class="absolute top-2 right-2 text-blue-500 hover:text-blue-700"
          onclick={`openModal('${key}', \`${displayValue.replace(/`/g, "\\`")}\`)`}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 20 20" fill="currentColor">
            <path d="M17.414 2.586a2 2 0 010 2.828L8.414 14.414 5 15l.586-3.414L14.586 2.586a2 2 0 012.828 0z" />
          </svg>
        </button>
      </div>
    );
  })}
  
  
  

  <!-- Progress Evaluation Section -->
  <div>
    <h3 class="font-bold text-lg mb-3">Progress Evaluation (EV)</h3>
    <select class="uk-select w-full p-2 border rounded">
      <option value="new" selected={formData["Progress Evaluation (EV)"] === "New"}>New</option>
      <option value="active" selected={formData["Progress Evaluation (EV)"] === "Active"}>Active</option>
      <option value="resolve" selected={formData["Progress Evaluation (EV)"] === "Resolved"}>Resolved</option>
      <option value="discontinued" selected={formData["Progress Evaluation (EV)"] === "Discontinued"}>
        Discontinued
      </option>
    </select>
  </div>

  <!-- Navigation Buttons -->
  <div class="flex justify-between mt-8">
    <button class="bg-gray-300 px-6 py-2 rounded-lg hover:bg-gray-400" onclick="window.history.back()">
      Back
    </button>
    <button type="submit" class="bg-blue-500 px-6 py-2 text-white rounded-lg hover:bg-blue-600">Save</button>
    <button
      type="submit"
      onclick="window.location.href='/NutritionD&I'"
      class="bg-blue-500 px-6 py-2 text-white rounded-lg hover:bg-blue-600"
    >
      Next
    </button>
  </div>
</div>


<script lang="ts">
  let currentSectionKey = null;

  function openModal(sectionKey, currentData) {
  // Set the modal title dynamically
  const modalTitleElement = document.getElementById("modal-title");
  if (modalTitleElement) {
    modalTitleElement.textContent = sectionKey;
  }

  // Populate the textarea with current data
  const sectionContentElement = document.getElementById("section-content");
  if (sectionContentElement) {
    sectionContentElement.value = currentData || "";
  }

  // Track the current section key for saving
  currentSectionKey = sectionKey;

  // Open the modal
  UIkit.modal("#edit-modal").show();
}

  async function saveData(patientId) {
    const updatedContent = document.getElementById("section-content").value;
    const fileInput = document.getElementById("file-upload");
    const imageInput = document.getElementById("image-upload");
    const linkInput = document.getElementById("link-input").value;

    const formData = new FormData();
    formData.append("data", JSON.stringify({ [currentSectionKey]: updatedContent }));
    if (fileInput.files[0]) {
      formData.append("files.file", fileInput.files[0]);
    }
    if (imageInput.files[0]) {
      formData.append("files.image", imageInput.files[0]);
    }
    formData.append("link", linkInput);

    try {
      const response = await fetch(
        `http://localhost:1337/api/screenedpatients/${patientId}`,
        {
          method: "PUT",
          body: formData,
        }
      );

      if (response.ok) {
        alert("Data updated successfully!");
        UIkit.modal("#edit-modal").hide();
        // Optionally refresh data here
        location.reload();
      } else {
        alert("Failed to update data.");
      }
    } catch (error) {
      console.error("Error updating data:", error);
      alert("An error occurred while updating data.");
    }
  }

  document.getElementById("save-modal").addEventListener("click", () => {
    const patientId = 1; // Replace with dynamic patient ID
    saveData(patientId);
  });
</script>



<!-- Modal structure -->
<div id="edit-modal" uk-modal>
  <div class="uk-modal-dialog p-6 rounded-lg bg-white shadow-lg w-1/2 mx-auto">
    <!-- Modal header -->
    <div class="uk-modal-header relative border-b pb-3">
      <h2 id="modal-title" class="uk-modal-title text-lg font-bold">Default Title</h2>
      <button
        aria-label="Close"
        class="absolute top-2 right-2 uk-modal-close text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300"
        type="button"
      >
        âœ–
      </button>
    </div>

    <!-- Modal body -->
    <div class="uk-modal-body space-y-4">
      <!-- Textarea for section content -->
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2" for="section-content">
          Section Content
        </label>
        <textarea
          id="section-content"
          class="w-full h-40 border border-gray-300 p-3 rounded focus:outline-none focus:ring focus:ring-blue-300"
          placeholder="Enter details"
        ></textarea>
      </div>

      <!-- File Upload -->
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2" for="file-upload">
          Upload File
        </label>
        <input
          id="file-upload"
          type="file"
          class="block w-full border border-gray-300 p-2 rounded focus:outline-none focus:ring focus:ring-blue-300"
        />
      </div>

      <!-- Image Upload -->
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2" for="image-upload">
          Upload Image
        </label>
        <input
          id="image-upload"
          type="file"
          accept="image/*"
          class="block w-full border border-gray-300 p-2 rounded focus:outline-none focus:ring focus:ring-blue-300"
        />
      </div>

      <!-- Add/Paste Link -->
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2" for="link-input">
          Add Link
        </label>
        <input
          id="link-input"
          type="url"
          class="block w-full border border-gray-300 p-2 rounded focus:outline-none focus:ring focus:ring-blue-300"
          placeholder="Paste a link here"
        />
      </div>
    </div>

    <!-- Modal footer -->
    <div class="uk-modal-footer flex justify-end space-x-3 mt-4 border-t pt-3">
      <button
        class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300"
        type="button"
        uk-toggle="target: #edit-modal"
      >
        Cancel
      </button>
      <button
        id="save-modal"
        class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Save
      </button>
    </div>
  </div>
</div>