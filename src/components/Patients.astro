---
import { fetchPatients } from "../utils/fetchPatients";
import { fetchScreenedPatients } from "../utils/fetchScreenedPatients";
import type { Patient } from "../types/Patient";
import type { ScreenedPatient } from "../types/ScreenedPatient";

// Fetch patient and screened patient data from Strapi
const patients: Patient[] = await fetchPatients();
const screenedPatients: ScreenedPatient[] = await fetchScreenedPatients();

// Combine patients and screenedPatients into one list
const combinedPatients = [
  ...patients.map((patient) => ({
    id: patient.id,
    name: patient.name,
    risk: patient.risk, // Use existing property
    visits: patient.visits, // Use existing property
    profileImage: patient.profileImage, // Use existing property
    type: "Patient",
  })),
  ...screenedPatients.map((patient) => ({
    id: patient.id,
    name: patient.name,
    risk: patient.risk || "N/A", // Use risk or fallback if undefined
    visits: "N/A", // Default value if visits are not available
    profileImage: "/Profiles/defaultimg.jpg", // Default value
    type: "Screened Patient",
  })),
];
---

<div class="container mx-auto p-6">
  <h1 class="text-2xl font-bold mb-6">Patient Record Details</h1>

  <!-- Search Bar -->
  <div class="flex justify-end items-center mb-6">
    <input 
      type="text" 
      placeholder="Search" 
      class="px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" 
    />
  </div>

  <!-- Patient Table Container -->
  <div class="overflow-x-auto border border-gray-300 rounded-lg shadow-md">
    <table class="min-w-full bg-white">
      <thead>
        <tr>
          <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700">ID</th>
          <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700">Patient's Name</th>
          <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700">Risk Level</th>
          <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700">Visits</th>
          <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700">Type</th>
        </tr>
      </thead>
      <tbody>
        {combinedPatients.length > 0 ? (
          combinedPatients.map((patient) => {
            const profileUrl =
              patient.type === "Patient"
                ? `/patients/${patient.id}`
                : `/screened-patients/${patient.id}`;
      
            const normalizedRisk = patient.risk?.toLowerCase().trim();
            const riskClass = normalizedRisk === "high"
              ? "bg-red-500 text-white"
              : normalizedRisk === "moderate"
              ? "bg-yellow-300 text-white"
              : "bg-green-500 text-white";
      
            return (
              <tr
                class="hover:bg-gray-100 cursor-pointer"
                onclick={`location.href='${profileUrl}'`}
              >
                <td class="py-2 px-4 border-b border-gray-300 text-center">{patient.id}</td>
                <td class="py-2 px-4 border-b border-gray-300 text-center">
                  <div class="flex items-center justify-center">
                    <img
                      src={patient.profileImage || '/default-profile.png'}
                      alt={patient.name}
                      class="w-8 h-8 rounded-full mr-2"
                    />
                    {patient.name}
                  </div>
                </td>
                <td class="py-2 px-4 border-b border-gray-300 text-center">
                  <span class={`inline-block w-15 px-2 py-1 rounded-lg text-center ${riskClass}`}>
                    {normalizedRisk === "high" ? "High Risk" : normalizedRisk === "moderate" ? "Moderate Risk" : "Low"}
                  </span>
                </td>
                <td class="py-2 px-4 border-b border-gray-300 text-center">{patient.visits || "N/A"}</td>
                <td class="py-2 px-4 border-b border-gray-300 text-center">{patient.type}</td>
              </tr>
            );
          })
        ) : (
          <tr>
            <td colspan="5" class="text-center py-4 text-gray-500">No patients found.</td>
          </tr>
        )}
      </tbody>
      
    </table>
  </div>

  <!-- Pagination -->
  <div class="flex justify-between items-center mt-6">
    <div>
      <button class="text-gray-500 hover:text-gray-700">&#9664;</button>
      <span class="mx-2">1-20 of {combinedPatients.length}</span>
      <button class="text-gray-500 hover:text-gray-700">&#9654;</button>
    </div>
    <div>
      <select 
        class="px-4 py-2 border border-gray-300 rounded focus:outline-none">
        <option>5 rows</option>
        <option>10 rows</option>
        <option>20 rows</option>
      </select>
    </div>
  </div>
</div>
